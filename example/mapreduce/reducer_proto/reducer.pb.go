// Code generated by protoc-gen-go.
// source: reducer.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	reducer.proto

It has these top-level messages:
	ReducerRequest
	ReducerResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type ReducerRequest struct {
	Key   string   `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=value" json:"value,omitempty"`
}

func (m *ReducerRequest) Reset()         { *m = ReducerRequest{} }
func (m *ReducerRequest) String() string { return proto1.CompactTextString(m) }
func (*ReducerRequest) ProtoMessage()    {}

type ReducerResponse struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ReducerResponse) Reset()         { *m = ReducerResponse{} }
func (m *ReducerResponse) String() string { return proto1.CompactTextString(m) }
func (*ReducerResponse) ProtoMessage()    {}

func init() {
}

// Client API for Reducer service

type ReducerClient interface {
	GetCollectResult(ctx context.Context, in *ReducerRequest, opts ...grpc.CallOption) (Reducer_GetCollectResultClient, error)
}

type reducerClient struct {
	cc *grpc.ClientConn
}

func NewReducerClient(cc *grpc.ClientConn) ReducerClient {
	return &reducerClient{cc}
}

func (c *reducerClient) GetCollectResult(ctx context.Context, in *ReducerRequest, opts ...grpc.CallOption) (Reducer_GetCollectResultClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Reducer_serviceDesc.Streams[0], c.cc, "/proto.Reducer/GetCollectResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &reducerGetCollectResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Reducer_GetCollectResultClient interface {
	Recv() (*ReducerResponse, error)
	grpc.ClientStream
}

type reducerGetCollectResultClient struct {
	grpc.ClientStream
}

func (x *reducerGetCollectResultClient) Recv() (*ReducerResponse, error) {
	m := new(ReducerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Reducer service

type ReducerServer interface {
	GetCollectResult(*ReducerRequest, Reducer_GetCollectResultServer) error
}

func RegisterReducerServer(s *grpc.Server, srv ReducerServer) {
	s.RegisterService(&_Reducer_serviceDesc, srv)
}

func _Reducer_GetCollectResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReducerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReducerServer).GetCollectResult(m, &reducerGetCollectResultServer{stream})
}

type Reducer_GetCollectResultServer interface {
	Send(*ReducerResponse) error
	grpc.ServerStream
}

type reducerGetCollectResultServer struct {
	grpc.ServerStream
}

func (x *reducerGetCollectResultServer) Send(m *ReducerResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Reducer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Reducer",
	HandlerType: (*ReducerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCollectResult",
			Handler:       _Reducer_GetCollectResult_Handler,
			ServerStreams: true,
		},
	},
}
